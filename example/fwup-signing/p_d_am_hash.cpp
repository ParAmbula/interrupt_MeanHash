#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
#include<sstream>
using namespace std;


//Заголовок
typedef struct {
    uint32_t crc;// -контрольная CRC сумма
    uint32_t data_size;// -размер заголовка
    uint16_t image_hdr_version;// -версия заголовка
    uint16_t image_magic;// -«магическое» число для проверки валидности образа, константное - не изменяется, используется для определения формата файла или структуры.Первые два байта всегда должны быть 0xabcd(к примеру).
    uint32_t image_date;// -дата создания файла
    uint8_t ecsda_sig[64];// -шифрование с помощью эллиптических кривых(2 целых числа по 32 байта)
    uint8_t image_type;// -тип заголовка
    uint8_t version_major;// 
    uint8_t version_minor;// 
    uint8_t version_patch;// 
} image_hdr_t;

//ВСЕ ЭТИ АЛГОРИТМЫ И МЕТОДЫ В ОСНОВНОМ ИСПОЛЬЗУЮТСЯ НА ИЗОБРАЖЕНИЯХ И АУДИОФАЙЛАХ.
//Есть ещё средний хеш(Average Hash or Mean Hash) и дифференциальный хеш(Difference Hash)
//Перцептивный хеш(Perceptive Hash) 64 бита — принимает строку = массив байт файла
//Для файла перцептивный и средние хеши по факту идентичны. Перцептивный в изображении использует метод DCT(discrete cosine transform) /
//чтобы уменьшить частоты. Для файла этого делать не надо. Перцептивный считает средние значения по DCT, а Average просто по среднему значению /
//байтов(пикселей).
//Также есть locality sensitive hashing (LSH) - для поиска похожих объектов на изображении.
//Ниже вариант расчёта среднего хеша для строки произвольной длины - предполагается что содержимое файла в виде hex



    //256- хеш 32 байта - чем больше размер куска тем длиннее хеш -- вариант 1 - для очень больших файлов
    //128- хеш 16
    //64 - хеш 8 байта -- вариант 2 - оптимально для больших кусков
    //32 - хеш 4 байта - вообще это не совсем корректно
    //16 - хеш 2 байта - работает со временем в формате Unix
    //8  - 1 байта хеш - уже теряется точность

static string PercHash(string FileBytes)
{  
    int numChunk = 256; //8x8 матрица => всего 64 бита => 16 byte hash => 16^16 вариантов // размер блока
    cout << (numChunk) << " - size of numChunk" << endl;
    cout << FileBytes.length() << " - length of FileBytes before" << endl;
    double Avgs=0, totalAvgs = 0;
    vector<double> avgList{};
    while ((FileBytes.length() % numChunk) != 0)
    {
        FileBytes += "A";//Выравнивание
    }
    cout << FileBytes.length() << " - length of FileBytes after" << endl;
    size_t chunkLen = FileBytes.length() / numChunk; // длина блока, их количество для хеша
    cout << sizeof(chunkLen) << " - size of chunklen and value -> " << chunkLen << endl;
    for (int i = 0; i < FileBytes.length(); i+= chunkLen)//считаем среднее
    {
        if (i + chunkLen > FileBytes.length())
            chunkLen = FileBytes.length() - i;
        for(char symb : FileBytes.substr(i,chunkLen))
        {
            Avgs += static_cast<uint64_t>(symb);
        }
        Avgs /= chunkLen;
        avgList.push_back(Avgs);
        totalAvgs += Avgs;
        Avgs = 0;
    }
    totalAvgs /= numChunk;
    string hash = "";
    for (int i = 0; i < avgList.size(); i++)//составляем нашу строку больше/меньше - 1/0
    {
        if (avgList[i] >= totalAvgs)
            hash += "1";
        else
            hash += "0";
    }
        string res = "";
        for (int i = 0; i < hash.length(); i += 8)//берём по 8 бит и переводим в hex
        {
            stringstream stream;
            string tmp;
            string bits8 = hash.substr(i, 8);
            int OneByte = 0;
            for (char c : bits8)
            {
                OneByte = (OneByte << 1) | (c - '0');// переводим в ASCII - формируем байт
                //OneByte = OneByte << 1; // Мб неясно но так мы все 8 бит проверяем. Если сначала записать значение то последний бит теряется
                //OneByte = OneByte | (c - '0'); // Shift the current set of bits to the left one bit // Add in the current bit via a bitwise-or                
            }
            stream << hex << OneByte;
            if (stream.str().length() < 2)
            {
                tmp.append("0");
                tmp.append(stream.str());
            }
            else
                tmp = stream.str();
            res += tmp;
            tmp.clear();
            stream.clear();
        }
        for (char& c : res)
            c=toupper(c);
        cout << "HASH - " << res << endl;
    return res;
}


//Вариант расстояния Хэмминга — принимает два хеша в виде строки 
 
//int ph_hamming_distance(const uint64_t hash1, const uint64_t hash2)
//{
//    uint64_t x = hash1 ^ hash2;
//    const uint64_t m1 = 0x5555555555555555ULL;
//    const uint64_t m2 = 0x3333333333333333ULL;
//    const uint64_t h01 = 0x0101010101010101ULL;
//    const uint64_t m4 = 0x0f0f0f0f0f0f0f0fULL;
//    x -= (x >> 1) & m1;
//    x = (x & m2) + ((x >> 2) & m2);
//    x = (x + (x >> 4)) & m4;
//    return int((x * h01) >> 56);
//}
//int ph_hamming_distance(const uint64_t X, const uint64_t Y)
//{
//    uint64_t result = X ^ Y;  
//    int count = 0;
//    while (result > 0)
//    {
//        count += result & 1;  
//        result >>= 1;        
//    }
//    return count;
//}

uint64_t HammingDistance(const string& hash1, const string& hash2)
{
    /*cout << "Hash 1 before " << hash1 << endl;
    cout << "Hash 2 before " << hash2 << endl;
    if (hash1.length() < hash2.length())
    {
        int quan = hash2.length() - hash1.length();
        hash1.insert(0, quan, '0');
    }
    else if (hash1.length() > hash2.length())
    {
        int quan = hash1.length() - hash2.length();
        hash2.insert(0, quan, '0');
    }
    cout << "Hash 1 after  " << hash1 << endl;
    cout << "Hash 2 after  " << hash2 << endl;*/
    
    uint64_t count = 0;
    for (uint64_t i = 0; hash1[i] != 0; i++)
        if (hash1[i] != hash2[i])
            count++;
    return count;
}


int update_nonce(int nonce, int ver, int crc)
{
    int flag = 0;
    flag |= (nonce & 1)<<1;
    flag |= (ver & 1)<<2;
    flag |= (crc & 1)<<4;
    int one = flag & (1 << 1);
    int two = flag & (1 << 2);
    int three = flag & (1 << 4);
    //int one = (flag & (1 << 1)) & (1 << 4);
    //int two = (flag & (1 << 2)) & (1 << 1);
    //int three = (flag & (1 << 4)) & (1 << 2);
    if (one)
        return ((nonce * ver + crc - 1) / 2);
    else if (two)
        return ((nonce * crc + ver - 5) / 4);
    else if (three)
        return ((nonce * 2 + crc - ver) / crc);
   /* else if (four)
        return ((nonce * 2 + crc - ver) / crc) - ((nonce * crc + ver - 5) / 4);
    else if (five)
        return ((nonce * 2 + crc - ver) / crc) + ((nonce * ver + crc - 1) / 2);
    else if (six)
        return (((nonce * 2 + crc - ver) / crc)*45+8-718/91)+2;*/
    else
        return -1;
}


int main(int argc, char** arvgv, char** envp)
{
    //Lots of manual testing and workarounds.

    //cout << update_nonce(126, 21, 0) << endl;
    //cout << update_nonce(2135, 86, 123) << endl;
    //cout << update_nonce(183, 25, 55) << endl;
    //cout << update_nonce(548, 85, 0) << endl;
    //cout << update_nonce(1, 348, 34) << endl;
    //cout << update_nonce(18566, 46, 0) << endl;
    //cout << update_nonce(2, 8769, 13) << endl;
    //cout << update_nonce(0, 124, 0) << endl;
    //stringstream ss;
    //uint64_t a;
    //uint64_t b;
    //ss << hex << 
    //ss >> a;
    //ss.clear();
    //ss << hex << PercHashs);
    //ss >> b;
    //cout << sizeof(a) << endl; // уходит в большие числа ограничение по размеру
    //cout << a << endl;
    //cout << sizeof(b) << endl;
    //cout << b << endl;
    //cout << ph_hamming_distance(a,b) << endl;    
    //string hs1{}, hs2{};
    // 1212121212121212 - 16 символов
    // В НАЧАЛЕ
    // 768
    //string orig1{s};
    //string orig2{ "1212121212121212DC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E"s };

    //string orig1{ "39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE418235"s};
    //string orig2{s };
    // 256 - 39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D9
    //string orig1{ "39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D9"s};
    //string orig2{ "1212121212121212DC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D9"s };
    // В СЕРЕДИНЕ
    // 768
    //string orig1{s};
    //string orig2{s };

    //string orig1{s};
    //string orig2{s };
    // 256 - 39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D9
    //string orig1{ "39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D9"s};
    //string orig2{ "39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D931212121212121212CDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D9"s };
    //В КОНЦЕ 
    // 768
    //string orig1{ "39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E"s};
    //string orig2{s};

    //string orig1{s};
    //string orig2{s };
    // 256 - 39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D9
    //string orig1{ "39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D9"s};
    //string orig2{ "39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E51212121212121212B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D9"s };
    // Два почти одинаковых значения
    //hs1.append(PercHash(orig1));
    // Разница в 8 байт
    //hs2.append(PercHash(orig2));
    // Ещё сильнее отличие
    //hs2.append(PercHashs));    
    // дата-время в формате Unix(считая от  1/1/1970)
    //hs1.append(PercHash("1650807901"s));
    //hs2.append(PercHash("1649771101"s));
    // 24.04.2022 в hex
    //hs1.append(PercHash("32342e30342e32303232"s));
    //hs2.append(PercHash("31342e30342e32303232"s));
    // Два разных значения
    //hs1.append(PercHash("39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E"s));
    //hs2.append(PercHash("12345678901234567890123456789012C4993F9C1BB187E8B860AABCABCDBCABD2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590E39709243CB2CFB4ADC8C37DE0EC98F7AC4993F9C1BB187E8B860A70919D472D93A23E2F84C7D000604D93A4E06E3BFA6B2C5CCDFB0D2F0913178ACBCAE4182352DBA6A8CDA2B0248199EF5DCEC0EB77416696C46E561EB5FA1D174ED91B0590EEFFF"s));
    //cout << "Original size 1 " << orig1.size()/2 << " and length " << orig1.length() << endl;
    //cout << "Original size 1 " << orig2.size()/2 << " and length " << orig2.length() << endl;
    //cout << HammingDistance(hs1, hs2) << endl;
    //cout << "Hash sizes " << hs1.size() / 2 << " and " << hs2.size() / 2 << " bytes" << endl;
    //cout << "Hash lengths " << hs1.length() << " and " << hs2.length() << " symbols" << endl;
    // 512KB = 512000 Bytes
    



    return 0;
}